package de.slackspace.openkeepass.crypto;

import java.util.Arrays;

import org.junit.Assert;
import org.junit.Test;

import de.slackspace.openkeepass.util.ByteUtils;

public class AesTest {

    @Test(expected = IllegalArgumentException.class)
    public void whenRoundsIsNegativeShouldThrowException() {
        Aes.transformKey(new byte[0], new byte[0], -1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void whenKeyIsNullShouldThrowException() {
        Aes.transformKey(null, new byte[0], 1000);
    }

    @Test(expected = IllegalArgumentException.class)
    public void whenDataIsNullShouldThrowException() {
        Aes.transformKey(new byte[0], null, 1000);
    }

    @Test
    public void shouldTransformKeyWith1000Rounds() {
        byte[] key = ByteUtils.hexStringToByteArray("3ecaacce890184af4fe7d6f6369dd14eb4a8a9641fefe346c9fbacb03c82a7c4");
        byte[] data = ByteUtils.hexStringToByteArray("2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c");

        byte[] transformedKey = Aes.transformKey(key, data, 1000);

        Assert.assertTrue("Hash must be 7ca367977502be1e8bb5b143706c3455cf1fe42458c80b1055db96113b9c3fec",
                Arrays.equals(ByteUtils.hexStringToByteArray("7ca367977502be1e8bb5b143706c3455cf1fe42458c80b1055db96113b9c3fec"), transformedKey));
    }

    @Test
    public void shouldTransformKeyWith6000Rounds() {
        byte[] key = ByteUtils.hexStringToByteArray("3ecaacce890184af4fe7d6f6369dd14eb4a8a9641fefe346c9fbacb03c82a7c4");
        byte[] data = ByteUtils.hexStringToByteArray("2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c");

        byte[] transformedKey = Aes.transformKey(key, data, 6000);

        Assert.assertTrue("Hash must be 8ad8a3addb033449fbee13c3fbf1ad74b9760d6c21048f08027b2ddc8adef20a",
                Arrays.equals(ByteUtils.hexStringToByteArray("8ad8a3addb033449fbee13c3fbf1ad74b9760d6c21048f08027b2ddc8adef20a"), transformedKey));
    }

    @Test
    public void shouldDecryptData() {
        byte[] key = ByteUtils.hexStringToByteArray("c91221bc9ae5054095490eb82014852d7370ff822fd3b4c84199329f43ae870c");
        byte[] ivRaw = ByteUtils.hexStringToByteArray("2c605455f181fbc9462aefb817852b37");
        byte[] encryptedData = ByteUtils.hexStringToByteArray(
                "bfdd755c7ee0ed0d637d379f6f9a3b74a8c209db4b67dc8f80bccb0dde428fad552a8fdaa3d77d4cdba40dfc2f5e0e39c02c6df89cb4fa6a966edba2ae8d2b9c8494772aad5cf4300fd1a3be98a9ed3b557f1b45a88995943d05777ce4df4cb158c8b34dbea547416e5335af6c2f96f7e01b5d72d17d3e2857da40ccf773ff469bdb93daed3843b1c3701db81e9cd424176e5c2f3447069d8a6b63b52a79890afea087156f02f1b65f9f018452644d8507b8a586512ad3db2533921a18b3ef48f9dd01225e26ae294d361ff1335ed3e3b166c322f7e68381860df0b4d5f7ef40e1ae10017189a56b5d11cfc07bbe142ad3dec3ca63d875887d1b9c17ff10556e6a96da6ea603e2699a224cd048d7c3c5139eaba5e6f0ae62b5ab2d0a6348c139898509f109184a05d521b27f7382d9d44a2ae370d1c479f2534f8dfd77c5a091a41fc1b1e27f21db1b4d8abf88203f9ac1a1ed6e155c903863429df306b49a09b2b99268784ff71c7b81735fa259c56515060b55342fe8d002dc3c41c4ce26c1f6f12d3ec155bef9b9d7c31fea0877ccc70130ddf4023a8d3bbee6596506a466702bf28ed1544c9b54ee22cc1faa418718ab93c0e3ef1817c3c1eb93d17172900b20044b51dd3765b577f3753122c16b45d79bb35291330dacc4f811d5235b4d3c7ed663a0b81e7d6f4aa46ca132aff290df0d3c1459619fa66b471ae5dff0d6beccdc15e0b132ff0301921f13c33459b1da455c5c8d4279395d6932cdbbe0aec80c3d5d248622acf280b8c5c5c435983bb1dd2b5240d184b8af22f9a4f7a32322c46ccac1a23055d636077f8ff67a3112dd19a607c7427f73e63d77e19fd30304bdcab0dafca683fd184d94d2b4f11c8faccfcc76542da443ba09c115ab98f3a5aeb7ef86253c68c891b659fc6496e1411a478b646154579e38e6109f0e1dc81a0409b568a639416a288f12a49e61d43fb0029228076f561ed70efe09ea687af9669a03274813cb1e800ada0639184383c4a74fd4e48f9732e8b994b9dca454b3496e76c5205510f335c3edcc2ccf0cb9e10ff902df346fcb6717e44806cfb46606a59c5d44297e32dd21b447e26184ace9bbc32f7ec40b28c6fff4e46640265c4783ad504ff335f1a47b10495f122a9924d5f39251492583e2c524182222784811f508b986f42ba0b950532db09486010f425444f95e5a7fefb824964bf223d7149d94400afad8f2a71345b26ce25d3959a3deb0475cbc4d5d8670dac41c04aa6480dd2b4a8330f00b4aac5f8254fecb55250b29014e1ad0b7d140d70d91f7af92653bf16dbe86a03db8f5d31a3f4ee1b823addbe3b52afaf4b2dfe9d616d56ae18176ceab0f0da2db9b9da59398876b767417a328adf8955f07c77f82ea233662c3cc1979e0de9b0005dd84e37b6229f2225278a537459e82886fb480d270eaec1b4b9cfb44e564e50941137378d48c73e24ac36af7bdf9847aad45f1ab52a51839ad16801bd6eb590d00fa1cec4ca9a5ec18b00014e866a0e6c447e0abdc37bd42fb146211417e77bfe8bd6c6c50ef95adb2696f55110ac1c0d90bce34662aa37bf3514b56a00c128ee404568b368acf3d0959980ca03bfee3c2b9bbe8440b62e611257fce2aa56db0fc38e4dcc19d6c259651455f110daba6f7a9e564525a72ef357ca6ad2a2d36007abed9f2e41c98a3132522b799665eb1d7459cde2c80073409a8c8cfdfd2036c2c6b40f2ed12d3bd9141380ee3d32261375310e0690ea343953338175eb9f45736373f33cbdc1ebcabdba6be92899d63c2eb7a6e036aedf2fefa796d8b8fbbaad2748a80de6e1432557fdcc69eeaebfed84e41ebeea0078c1b38ee5bc7a55c21b3782b69e3a3b814dc4314c842e2743b503aa314f4cdde06dadb11f81f0202e12c86d24ba13b82eae05bada9599d2413227dc7bca2b353172a378c533af688e94cacad26a84b75900dfcfbfad9ee70eb0cdca08d8bce4109cbd3a7a957ed3123d25b1794b6d7bee269cd654d268045259724f277af2c940d6cee4158caac8a17a6492f782627b52cf392af5c674a80a5f2aa0f64d91fdd51a1be4e274aeafef158ccc2ad5d00fd7c06c10bb0d70c5b2d9610b7d557c0717cd38485bb789c6ad8cba314f25f7a403f144a0e5378d542f0eeef78e42a358728989564413460b7b667a03951568489fa76ee68aa78e835ae7a1eed6cecb7a78cf618e3f1a2d031efdca8077935e245fa5d09f7e195ae4681b88041d38cbe92df21444c248d31e0b0321988101e570f040963709dcb00522cbe65228ba43a7324abf91baa2f1a4b83fc79cd39d12f3cfc64e40c4a4686a684bf840329584bef7e6cbc4d2c18782d9a65e01585ce774f0b1e440a5cd1ffb66faf7865c6c0c2fc96016f3bc101fb29eef8c6bebfe7d09cb403b83be3adcfc51617f0fd994e84f0096850b4d88d80f96de5ed8c8c09308ae9d346f692c72ff4acbe949105218e738e24641b8135692b645a629efd5565b091ae2b4b221a491499f908a680c5288384b3e50adf88cc0145f1be8da69f2ad3bb83923a579da6097d210c5ff00a");

        byte[] decryptedData = Aes.decrypt(key, ivRaw, encryptedData);
        Assert.assertTrue("Decrypted data is not correct",
                Arrays.equals(
                        ByteUtils.hexStringToByteArray(
                                "69d788d9b01ea1facd1c0bf0187e7d74e4aa07b20d464f3d23d0b2dc2f059ff8000000008e0c5564df5e72b78c7b009b3e4a494e05c0d0387957d246d6b8cc8489e4ba19ad0600001f8b0800000000000400ed5adb6ee248107d66a5fd07c4be6d94d8e616888c4704cce40664b824b3f3b26a4c010ec626dd4d08339a7fdff615dbb48164273b62365114e1ea53d5edf63955d50ef287e799917e024c74cbac64a41331930653b386ba39ae641674745ccaa40945e61019960995cc0a48e683f2fb6ff235c02d22a4a11bc02e53721328b23fa4e48f600246d4c28a879185b5c941d411450344a08566a0f48050df200b91a10d706d82cc310c95ac28e58f25e9389bed89e5b342f92c57fe12f5f591911075201ad6e794ddab72b520348dd204cde606a48783b57b1895e4bedf42380e6e4018a18541fb04b0bdd6b4c03527cc513a2b14ed39f860275013e9260513991a5ce8846dfbaa8e5644c9150bb29030e6f8d52cc3c2fe6a9a8850c0d7b0dabe8e0d18cfb9039a722c6d806d330fdeb0b0063c0777c07581195bfb2db62868c1a34ac99ea1a753c6cb06326c4e456c1198bf7b3164608e806d2a2f2d3c547a78b1c606d668e0ce4d3c26b344202df697c440aecdb93f817b8332dbb29566c0b96eaa261a18e0af66d31e83f7fb9775a5cafda954c2fe0e30e6bc9d029b38c75d35295ef580e90bb1bbfa88adc57ccb0278e8a430db97b3c5c109e8d1be899e2f29cc882289b210b7c5805dfd2b28c56c59ca178a61b06377b0378ca85d30d8a382a1bbf8c6e353f3aab47a30faddaa4acbed59abfb90756e75131b84e859f33b9de8ec01ba03067e5ae256365750a19d3f6ab7c70df5a1b3f483c4d14e18f61810d681f83aaeb14467cdec94e45a6c66b9a95aee5816f57276e09f921d02244f1cf023253b1aa191fc1d928d43666f1529f952b34ce6982fcb82f7d1b5f7f49947796f0b9aacf88c740dd99cb707139e3217ea85a961d8e51e818466af6a1a10c27364bf396fde10c873559fe73a231d773ec9760b01c22eeb0ce05f7aa37d82c650b31626554a6ccfd757fe5a2df7b6b74b218e72b75c08edb97c49d8ccacbe0799246470115ea5a92ea8d55bcda10b8f0bd62240f064dd84e30f2be6c2306c11468c61641710d626acc18840d756171be5b7a3e92dd98387f6e70c3efbd4d607c39bfb5249eb17cf9ff0ed27e3e9fab1598d523be0ab18a56b4a662508c64c2de6305c2d6ddd216dca1d68b3f60aeb436015606deca131095d8544b09f0abc4e638b0ab6cbc0f3e7c860b70ef285241dbc46083b94109182c491c24e2df85bc5d342540c29b94b71404176c91a0fc54963b2607ff4cd77c858803fe05ef8d1220178e1fc7e811331ed157b185632b616334a3f57a6d74f77aa59562b2f9ec9e977780befba3dafa38c1747652ce6c59c503a3f138429c09cdde0896e8e2ce1e5b1bdbe8b37813d967607b7458d669c20e7f8c92ddc1ca5bcd6be8791494680db83d182b81cb1659f34e4bb5609b1343d624bc9f7ba39b4964a0fe131d0b47b250b9e3540b1bb23145bd320972adffa5db5d3aa36d5efdf7ad5f3efdf6eabddee7dbb53f72ed5564fed7c77b625e6e8af46d85c0eb34537c36f6882cc2d6c4f9417a7b9d1d7bb1be1a2bf58156ba3ac06bdc7cbf17ba2dc3f5196fe4f89f24599edbe51ec5fa1e51b65b5f41fd9b74c6c1330e6c274c07ec5b298178b7fdb3df0c8c2b393099d193f34ed35756d82c0c865a583c87b6c1fd24cf8b3f471da7bf9f3e71ee92fd0f78fc863a1a38c97c7924f62e13ce69c5cdc175546f81c133bc8ac4f32a578c63bace4947c9a79ebe4947bebe4b4f34cb3f350f38253cd8b8e35fc73cde339993db5af6735f1b1b3babc6aa3ac5eed6c3fd744ebb547f4e43821a22756ece4929d5cb3f9453b56b563cad82d0d493c13c5b3acb8431abbb451282468639b3862736f8ae355ead8258fddc57b0f8138f7cb17484c21f1329474d2f1ab50f465b9c970d16a142f47fcf8dc0621b14380c9d174727ff757eb34f7b1599586a57151fa5cea4f8ab569e535b36f360e418d5d718e42fb058d370db1ae616c5963034e346bf6aae0bcbe60bd687b7857d8785bb0a32ff8578d41bc4c6fd4e958a116c22f1d37ab36fe4c4feb476a53101fef253cbe3dcf8f0be6925bb5dd0683ec53b573875eb5a55ff648716855fb356f237770bebe1c56d1b599a7eaea73c3e8178a42b67ffe89cbf91650964ba77b71feb0291fccfc9f535e7ca7fc9b53bed61ef7f12d2ddc8ac5d3621d565f4c012df894bf34296013e83e9c970e9bf385eccfe27cf69df36fce79e1f97ed41e99b5e2543f2d92d6047fe99c627e6b034da4eff53a422a1f36e3dfb3fcafccf8cef08166a52b0389476ae1535935ae2e96d2c6bf121c965f5833182073ca16b95773737ad8bcff7999febda1ffb1bc8f7cae83011486edc1036894f8dfbcf1be70631fe8d7df9efc076926aea08429000001000000000000000000000000000000000000000000000000000000000000000000000000000000"),
                decryptedData));
    }

    @Test
    public void shouldEncryptData() {
        byte[] key = ByteUtils.hexStringToByteArray("c91221bc9ae5054095490eb82014852d7370ff822fd3b4c84199329f43ae870c");
        byte[] ivRaw = ByteUtils.hexStringToByteArray("2c605455f181fbc9462aefb817852b37");
        byte[] data = ByteUtils.hexStringToByteArray(
                "69d788d9b01ea1facd1c0bf0187e7d74e4aa07b20d464f3d23d0b2dc2f059ff8000000008e0c5564df5e72b78c7b009b3e4a494e05c0d0387957d246d6b8cc8489e4ba19ad0600001f8b0800000000000400ed5adb6ee248107d66a5fd07c4be6d94d8e616888c4704cce40664b824b3f3b26a4c010ec626dd4d08339a7fdff615dbb48164273b62365114e1ea53d5edf63955d50ef287e799917e024c74cbac64a41331930653b386ba39ae641674745ccaa40945e61019960995cc0a48e683f2fb6ff235c02d22a4a11bc02e53721328b23fa4e48f600246d4c28a879185b5c941d411450344a08566a0f48050df200b91a10d706d82cc310c95ac28e58f25e9389bed89e5b342f92c57fe12f5f591911075201ad6e794ddab72b520348dd204cde606a48783b57b1895e4bedf42380e6e4018a18541fb04b0bdd6b4c03527cc513a2b14ed39f860275013e9260513991a5ce8846dfbaa8e5644c9150bb29030e6f8d52cc3c2fe6a9a8850c0d7b0dabe8e0d18cfb9039a722c6d806d330fdeb0b0063c0777c07581195bfb2db62868c1a34ac99ea1a753c6cb06326c4e456c1198bf7b3164608e806d2a2f2d3c547a78b1c606d668e0ce4d3c26b344202df697c440aecdb93f817b8332dbb29566c0b96eaa261a18e0af66d31e83f7fb9775a5cafda954c2fe0e30e6bc9d029b38c75d35295ef580e90bb1bbfa88adc57ccb0278e8a430db97b3c5c109e8d1be899e2f29cc882289b210b7c5805dfd2b28c56c59ca178a61b06377b0378ca85d30d8a382a1bbf8c6e353f3aab47a30faddaa4acbed59abfb90756e75131b84e859f33b9de8ec01ba03067e5ae256365750a19d3f6ab7c70df5a1b3f483c4d14e18f61810d681f83aaeb14467cdec94e45a6c66b9a95aee5816f57276e09f921d02244f1cf023253b1aa191fc1d928d43666f1529f952b34ce6982fcb82f7d1b5f7f49947796f0b9aacf88c740dd99cb707139e3217ea85a961d8e51e818466af6a1a10c27364bf396fde10c873559fe73a231d773ec9760b01c22eeb0ce05f7aa37d82c650b31626554a6ccfd757fe5a2df7b6b74b218e72b75c08edb97c49d8ccacbe0799246470115ea5a92ea8d55bcda10b8f0bd62240f064dd84e30f2be6c2306c11468c61641710d626acc18840d756171be5b7a3e92dd98387f6e70c3efbd4d607c39bfb5249eb17cf9ff0ed27e3e9fab1598d523be0ab18a56b4a662508c64c2de6305c2d6ddd216dca1d68b3f60aeb436015606deca131095d8544b09f0abc4e638b0ab6cbc0f3e7c860b70ef285241dbc46083b94109182c491c24e2df85bc5d342540c29b94b71404176c91a0fc54963b2607ff4cd77c858803fe05ef8d1220178e1fc7e811331ed157b185632b616334a3f57a6d74f77aa59562b2f9ec9e977780befba3dafa38c1747652ce6c59c503a3f138429c09cdde0896e8e2ce1e5b1bdbe8b37813d967607b7458d669c20e7f8c92ddc1ca5bcd6be8791494680db83d182b81cb1659f34e4bb5609b1343d624bc9f7ba39b4964a0fe131d0b47b250b9e3540b1bb23145bd320972adffa5db5d3aa36d5efdf7ad5f3efdf6eabddee7dbb53f72ed5564fed7c77b625e6e8af46d85c0eb34537c36f6882cc2d6c4f9417a7b9d1d7bb1be1a2bf58156ba3ac06bdc7cbf17ba2dc3f5196fe4f89f24599edbe51ec5fa1e51b65b5f41fd9b74c6c1330e6c274c07ec5b298178b7fdb3df0c8c2b393099d193f34ed35756d82c0c865a583c87b6c1fd24cf8b3f471da7bf9f3e71ee92fd0f78fc863a1a38c97c7924f62e13ce69c5cdc175546f81c133bc8ac4f32a578c63bace4947c9a79ebe4947bebe4b4f34cb3f350f38253cd8b8e35fc73cde339993db5af6735f1b1b3babc6aa3ac5eed6c3fd744ebb547f4e43821a22756ece4929d5cb3f9453b56b563cad82d0d493c13c5b3acb8431abbb451282468639b3862736f8ae355ead8258fddc57b0f8138f7cb17484c21f1329474d2f1ab50f465b9c970d16a142f47fcf8dc0621b14380c9d174727ff757eb34f7b1599586a57151fa5cea4f8ab569e535b36f360e418d5d718e42fb058d370db1ae616c5963034e346bf6aae0bcbe60bd687b7857d8785bb0a32ff8578d41bc4c6fd4e958a116c22f1d37ab36fe4c4feb476a53101fef253cbe3dcf8f0be6925bb5dd0683ec53b573875eb5a55ff648716855fb356f237770bebe1c56d1b599a7eaea73c3e8178a42b67ffe89cbf91650964ba77b71feb0291fccfc9f535e7ca7fc9b53bed61ef7f12d2ddc8ac5d3621d565f4c012df894bf34296013e83e9c970e9bf385eccfe27cf69df36fce79e1f97ed41e99b5e2543f2d92d6047fe99c627e6b034da4eff53a422a1f36e3dfb3fcafccf8cef08166a52b0389476ae1535935ae2e96d2c6bf121c965f5833182073ca16b95773737ad8bcff7999febda1ffb1bc8f7cae83011486edc1036894f8dfbcf1be70631fe8d7df9efc076926aea08429000001000000000000000000000000000000000000000000000000000000000000000000000000000000");

        byte[] encryptedData = Aes.encrypt(key, ivRaw, data);
        Assert.assertTrue("Encrypted data is not correct",
                Arrays.equals(
                        ByteUtils.hexStringToByteArray(
                                "bfdd755c7ee0ed0d637d379f6f9a3b74a8c209db4b67dc8f80bccb0dde428fad552a8fdaa3d77d4cdba40dfc2f5e0e39c02c6df89cb4fa6a966edba2ae8d2b9c8494772aad5cf4300fd1a3be98a9ed3b557f1b45a88995943d05777ce4df4cb158c8b34dbea547416e5335af6c2f96f7e01b5d72d17d3e2857da40ccf773ff469bdb93daed3843b1c3701db81e9cd424176e5c2f3447069d8a6b63b52a79890afea087156f02f1b65f9f018452644d8507b8a586512ad3db2533921a18b3ef48f9dd01225e26ae294d361ff1335ed3e3b166c322f7e68381860df0b4d5f7ef40e1ae10017189a56b5d11cfc07bbe142ad3dec3ca63d875887d1b9c17ff10556e6a96da6ea603e2699a224cd048d7c3c5139eaba5e6f0ae62b5ab2d0a6348c139898509f109184a05d521b27f7382d9d44a2ae370d1c479f2534f8dfd77c5a091a41fc1b1e27f21db1b4d8abf88203f9ac1a1ed6e155c903863429df306b49a09b2b99268784ff71c7b81735fa259c56515060b55342fe8d002dc3c41c4ce26c1f6f12d3ec155bef9b9d7c31fea0877ccc70130ddf4023a8d3bbee6596506a466702bf28ed1544c9b54ee22cc1faa418718ab93c0e3ef1817c3c1eb93d17172900b20044b51dd3765b577f3753122c16b45d79bb35291330dacc4f811d5235b4d3c7ed663a0b81e7d6f4aa46ca132aff290df0d3c1459619fa66b471ae5dff0d6beccdc15e0b132ff0301921f13c33459b1da455c5c8d4279395d6932cdbbe0aec80c3d5d248622acf280b8c5c5c435983bb1dd2b5240d184b8af22f9a4f7a32322c46ccac1a23055d636077f8ff67a3112dd19a607c7427f73e63d77e19fd30304bdcab0dafca683fd184d94d2b4f11c8faccfcc76542da443ba09c115ab98f3a5aeb7ef86253c68c891b659fc6496e1411a478b646154579e38e6109f0e1dc81a0409b568a639416a288f12a49e61d43fb0029228076f561ed70efe09ea687af9669a03274813cb1e800ada0639184383c4a74fd4e48f9732e8b994b9dca454b3496e76c5205510f335c3edcc2ccf0cb9e10ff902df346fcb6717e44806cfb46606a59c5d44297e32dd21b447e26184ace9bbc32f7ec40b28c6fff4e46640265c4783ad504ff335f1a47b10495f122a9924d5f39251492583e2c524182222784811f508b986f42ba0b950532db09486010f425444f95e5a7fefb824964bf223d7149d94400afad8f2a71345b26ce25d3959a3deb0475cbc4d5d8670dac41c04aa6480dd2b4a8330f00b4aac5f8254fecb55250b29014e1ad0b7d140d70d91f7af92653bf16dbe86a03db8f5d31a3f4ee1b823addbe3b52afaf4b2dfe9d616d56ae18176ceab0f0da2db9b9da59398876b767417a328adf8955f07c77f82ea233662c3cc1979e0de9b0005dd84e37b6229f2225278a537459e82886fb480d270eaec1b4b9cfb44e564e50941137378d48c73e24ac36af7bdf9847aad45f1ab52a51839ad16801bd6eb590d00fa1cec4ca9a5ec18b00014e866a0e6c447e0abdc37bd42fb146211417e77bfe8bd6c6c50ef95adb2696f55110ac1c0d90bce34662aa37bf3514b56a00c128ee404568b368acf3d0959980ca03bfee3c2b9bbe8440b62e611257fce2aa56db0fc38e4dcc19d6c259651455f110daba6f7a9e564525a72ef357ca6ad2a2d36007abed9f2e41c98a3132522b799665eb1d7459cde2c80073409a8c8cfdfd2036c2c6b40f2ed12d3bd9141380ee3d32261375310e0690ea343953338175eb9f45736373f33cbdc1ebcabdba6be92899d63c2eb7a6e036aedf2fefa796d8b8fbbaad2748a80de6e1432557fdcc69eeaebfed84e41ebeea0078c1b38ee5bc7a55c21b3782b69e3a3b814dc4314c842e2743b503aa314f4cdde06dadb11f81f0202e12c86d24ba13b82eae05bada9599d2413227dc7bca2b353172a378c533af688e94cacad26a84b75900dfcfbfad9ee70eb0cdca08d8bce4109cbd3a7a957ed3123d25b1794b6d7bee269cd654d268045259724f277af2c940d6cee4158caac8a17a6492f782627b52cf392af5c674a80a5f2aa0f64d91fdd51a1be4e274aeafef158ccc2ad5d00fd7c06c10bb0d70c5b2d9610b7d557c0717cd38485bb789c6ad8cba314f25f7a403f144a0e5378d542f0eeef78e42a358728989564413460b7b667a03951568489fa76ee68aa78e835ae7a1eed6cecb7a78cf618e3f1a2d031efdca8077935e245fa5d09f7e195ae4681b88041d38cbe92df21444c248d31e0b0321988101e570f040963709dcb00522cbe65228ba43a7324abf91baa2f1a4b83fc79cd39d12f3cfc64e40c4a4686a684bf840329584bef7e6cbc4d2c18782d9a65e01585ce774f0b1e440a5cd1ffb66faf7865c6c0c2fc96016f3bc101fb29eef8c6bebfe7d09cb403b83be3adcfc51617f0fd994e84f0096850b4d88d80f96de5ed8c8c09308ae9d346f692c72ff4acbe949105218e738e24641b8135692b645a629efd5565b091ae2b4b221a491499f908a680c5288384b3e50adf88cc0145f1be8da69f2ad3bb83923a579da6097d210c5ff00a"),
                encryptedData));
    }

    @Test
    public void shouldEncryptAndDecryptCorrectly() {
        byte[] key = ByteUtils.hexStringToByteArray("c91221bc9ae5054095490eb82014852d7370ff822fd3b4c84199329f43ae870c");
        byte[] ivRaw = ByteUtils.hexStringToByteArray("2c605455f181fbc9462aefb817852b37");
        byte[] data = "MyTestData".getBytes();

        byte[] encrypted = Aes.encrypt(key, ivRaw, data);
        String decryptedData = new String(Aes.decrypt(key, ivRaw, encrypted));

        Assert.assertEquals("MyTestData", decryptedData);
    }

}
